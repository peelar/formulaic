// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Theme {
  MUI
  ANTD
  CHAKRA
  SEMANTIC
}

model Form {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  name            String
  domainAllowList String[]
  schemas         Schema[]
  author          User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String
  theme           Theme    @default(MUI)
}

model Schema {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  content     Json         @db.Json
  submissions Submission[]
  version     Int          @default(autoincrement())
  Form        Form?        @relation(fields: [formId], references: [id])
  formId      String?
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?
}

model Submission {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  content           Json     @db.JsonB
  versionedSchema   Schema   @relation(fields: [versionedSchemaId], references: [id])
  versionedSchemaId String
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  forms         Form[]
  accounts      Account[]
  sessions      Session[]
  Schema        Schema[]

  @@map(name: "users") // next-auth requires it
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
